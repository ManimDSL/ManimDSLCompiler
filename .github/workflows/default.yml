name: Java CI/CD

on: [push]

jobs:
  build:
    name: Build and Test Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Check
        run: ./gradlew clean check --info
      - name: UnitTest
        run: ./gradlew clean test --info

  docs:
    needs: [build]
    name: Generate Docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build Documentation
      run: ./gradlew dokkaHtml

    # Push the HTML to github-pages
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v3.6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/dokka/html/

  draft-release:
    needs: [build]
    if: github.ref == 'refs/heads/master'
    name: Create Draft Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Draft Release
        id: create_release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          name: Latest Development Build
          tag: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  package:
    if: github.ref == 'refs/heads/master'
    needs: [ draft-release ]
    name: "Build and Upload Release"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: "Build Native Image"
        run: |
          ./gradlew clean nativeImage
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: "Rename executable"
        shell: bash
        run: |
          value=`cp build/graal/valgolang build/graal/valgolang-${{ matrix.os }}`
          value=`cp build/libs/*.jar build/libs/valgolang.jar`
      - name: Upload Binary Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: build/graal/valgolang-${{ matrix.os }}
          asset_name: valgolang-${{ matrix.os }}
          asset_content_type: application/octet-stream
      - name: Upload Jar
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: build/libs/valgolang.jar
          asset_name: valgolang.jar
          asset_content_type: application/jar