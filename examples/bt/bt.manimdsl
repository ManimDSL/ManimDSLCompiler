fun inorder(head: Node<number>, list2: List<number>, i: number): number {
    if (head == null) {
        return i;
    } else {
        let j = inorder(head.left, list2, i);
        list2.append(head.value);
        return inorder(head.right, list2, j+1);
    }
}

fun buildBST(i: number, j: number, list1: List<number>): Node<number> {
    if (i == j) {
        return Node<number>(list1[i]);
    }
    if (i > j) {
        return null;
    }
    let m = i+j;
    m = m/2;
    let head = Node<number>(list1[m]);
    head.left = buildBST(i, m-1, list1);
    head.right = buildBST(m+1, j, list1);
    return head;
}

let list1 = List<number>(7) {1, 2, 3, 4, 5, 6, 7};
@stepOver {
let head = Node<number>(4);
let tree = Tree<Node<number>>(head);
head.left = buildBST(0, 2, list1);
head.right = buildBST(4, list1.size()-1, list1);
}
let list2 = List<number>();
inorder(tree.root, list2, 0);

