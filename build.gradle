plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.jmailen.kotlinter' version '3.2.0'
    id "nebula.ospackage" version "8.4.1"
    id("org.jetbrains.dokka") version "1.4.20"
    id "com.palantir.graal" version "0.7.2"
    id "org.jetbrains.kotlin.kapt" version "1.4.32"
}

group 'org.example'
version '1.0-SNAPSHOT'

description = """VAlgoLang Interpreter"""

repositories {
    mavenCentral()
    jcenter()
}

task buildAntlr() {
    println 'Compiling Antlr Parser'
    if (System.getProperty('os.name').toLowerCase().contains("windows")) {
        exec {
            workingDir 'antlr_config'
            commandLine 'cmd', '/c', 'antlrBuild.bat'
        }
    } else {
        exec {
            workingDir 'antlr_config'
            commandLine './antlrBuild'
        }
    }
}

task debianPackage(type: Deb) {
    release '1'
    into '/opt/valgolang'
    preInstall file('bin/preInstall.sh')
    from(jar.outputs.files) {
        into 'lib'
    }
    from("bin/compile") {
        into 'bin'
    }
    requires("openjdk-8-jre")
    requires("python3")
    requires("python3-pip")
    requires("ffmpeg")
    requires("libcairo2")
    requires("libcairo2-dev")
    requires("texlive")
    requires("texlive-latex-extra")
    requires("texlive-fonts-extra")
    requires("texlive-latex-recommended")
    requires("texlive-science")
    requires("texlive-fonts-extra")
    requires("tipa")

    link("/usr/bin/valgolang", "/opt/valgolang/bin/compile", 777)
}

jar {
    manifest {
        attributes 'Main-Class': 'com.valgolang.CompilerKt'
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude "**/module-info.class"
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation("com.ginsberg:junit5-system-exit:1.0.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    testRuntime("org.junit.platform:junit-platform-runner:1.5.2")
    testCompile "org.junit.jupiter:junit-jupiter-params:5.4.2"
    testCompileOnly 'junit:junit:4.12'
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile 'info.picocli:picocli:4.5.1'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.10"
    kapt 'info.picocli:picocli-codegen:4.6.1'
    implementation 'info.picocli:picocli:4.6.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.allWarningsAsErrors = true
//    dependsOn buildAntlr
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kapt {
    arguments {
        arg("project", "${project.group}/${project.name}")
    }
}

kotlinter {
    ignoreFailures = false
    indentSize = 4
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
    disabledRules = ["no-wildcard-imports"]
}

test () {
    useJUnitPlatform()
    testLogging {
        events ("passed", "skipped", "failed")
    }
}

graal {
    mainClass 'com.valgolang.CompilerKt'
    outputName 'valgolang'
    nativeImage {
        option "-H:+ReportExceptionStackTraces"
        option "-H:ResourceConfigurationFiles=bin/build-config/resource-config.json"
        option "-H:ReflectionConfigurationFiles=bin/build-config/reflect-config.json"
        option "--no-fallback"
    }
}

